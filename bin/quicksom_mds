#!/usr/bin/env python3
# -*- coding: UTF8 -*-

#############################################################################
# Author: Guillaume Bouvier -- guillaume.bouvier@pasteur.fr                 #
# https://research.pasteur.fr/en/member/guillaume-bouvier/                  #
# Copyright (c) 2021 Institut Pasteur                                       #
#                                                           #
#                                                                           #
#  Redistribution and use in source and binary forms, with or without       #
#  modification, are permitted provided that the following conditions       #
#  are met:                                                                 #
#                                                                           #
#  1. Redistributions of source code must retain the above copyright        #
#  notice, this list of conditions and the following disclaimer.            #
#  2. Redistributions in binary form must reproduce the above copyright     #
#  notice, this list of conditions and the following disclaimer in the      #
#  documentation and/or other materials provided with the distribution.     #
#  3. Neither the name of the copyright holder nor the names of its         #
#  contributors may be used to endorse or promote products derived from     #
#  this software without specific prior written permission.                 #
#                                                                           #
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS      #
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT        #
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR    #
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT     #
#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   #
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT         #
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    #
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY    #
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT      #
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE    #
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.     #
#                                                                           #
#  This program is free software: you can redistribute it and/or modify     #
#                                                                           #
#############################################################################

import pickle
import os
import itertools
from sklearn.manifold import MDS
import matplotlib.pyplot as plt
import numpy as np


def get_frame_id(x, y, bmus):
    mds_coords = som.mds
    dlist = np.linalg.norm(mds_coords - np.asarray([x, y]), axis=1)
    ind = dlist.argmin()
    bmus_ravel = np.ravel_multi_index((bmus[:, 0], bmus[:, 1]), (som.m, som.n))
    frame_ids = np.where(bmus_ravel == ind)[0]
    return frame_ids


def display_conf(frame_ids, obj_name=None):
    cmd.set('all_states', 0)
    if obj_name is None:
        obj_name = 'cluster'
    cmd.delete('cluster')
    for frame_id in frame_ids:
        cmd.create(obj_name, 'traj', frame_id + 1, -1)
    cmd.disable('traj')
    cmd.set('all_states', 1)


class ConfViewer(object):
    def __init__(self, bmus):
        self.bmus = bmus

    def view_conf(self, x, y):
        display_conf(get_frame_id(x, y, self.bmus))


def onclick(event):
    """
    Load trajectory frame when clicking the map
    """
    x, y = event.xdata, event.ydata
    ind = np.linalg.norm(np.c_[x, y] - som.mds, axis=1).argmin()
    try:
        confviewer.view_conf(x, y)
        print(x, y, mapping[ind])
    except NameError:
        frameid = get_frame_id(x, y, bmus)
        # print(x, y, mapping[ind], frameid[0])
        print()
        print("x:", x)
        print("y:", y)
        print("mapping:", mapping[ind])
        print("frames:", " ".join([f"{e:d}" for e in frameid]))


def project(data, bmus, som):
    n = som.m * som.n
    projections = np.zeros(n)
    counts = np.zeros(n)
    for val, bmu in zip(data, bmus):
        bmu = np.ravel_multi_index(bmu, (som.m, som.n))
        projections[bmu] += val
        counts[bmu] += 1
    projections /= counts
    return projections


def rigid_body_fit(A, B):
    """
    A: Point cloud to align (shape: (natoms*3))
    B: references point cloud (shape: (nframes, natoms*3))
    """
    natoms = A.size // 3
    nframes = B.shape[0]
    A = A.reshape((natoms, 3))
    B = B.reshape((nframes, natoms, 3))
    a_mean = A.mean(axis=0)
    b_mean = B.mean(axis=1)
    A_c = A - a_mean
    B_c = B - b_mean[:, None, :]
    # Covariance matrix
    # print(A_c.shape, B_c.shape)
    H = A_c.T.dot(B_c)
    H = np.swapaxes(H, 0, 1)
    # print(H.shape)
    U, S, V = np.linalg.svd(H)
    V = V.swapaxes(1, 2)
    # print(U.shape, S.shape, V.shape)
    # Rotation matrix
    n = len(U)
    R = np.asarray([V[i].dot(U[i].T) for i in range(n)])
    # print(R.shape)
    # Translation vector
    # print(a_mean.shape, b_mean.shape)
    a_mean_rot = np.asarray([R[i].dot(a_mean[None, :].T).T for i in range(n)])
    t = b_mean[:, None, :] - a_mean_rot
    # print(t.shape, A.shape)
    A_out = np.asarray([R[i].dot(A.T).T for i in range(n)]) + t
    # print(A_out.shape)
    return A_out


def get_bmu_labels(groups, bmus):
    labels = np.unique(groups)
    bmus_labels = {}
    for label in labels:
        inds = np.where(groups == label)[0]
        bmus_label = bmus[inds]
        bmus_label = np.ravel_multi_index((bmus_label[:, 0], bmus_label[:, 1]), (som.m, som.n))
        bmus_label = np.unique(bmus_label)
        bmus_labels[label] = set(bmus_label)
    return bmus_labels


def get_overlaps(bmus_labels):
    all_intersections = set()
    for label1 in bmus_labels.keys():
        bmus1 = bmus_labels[label1]
        for label2 in set(bmus_labels.keys()) - set([
                label1,
        ]):
            bmus2 = bmus_labels[label2]
            bmus_inter = bmus1.intersection(bmus2)
            all_intersections = all_intersections.union(bmus_inter)
    for label in bmus_labels.keys():
        bmus_labels[label] = bmus_labels[label] - all_intersections
    bmus_labels['overlap'] = all_intersections
    return bmus_labels


def som_to_dcd(topology, smap, sel='all', objname='somtraj', savetraj=False):
    from pymol import cmd
    import psico.fullinit
    if sel is None:
        sel = 'all'
    if smap.ndim == 3:
        nx, ny, nz = smap.shape
        smap = smap.reshape((nx * ny, nz))
    n, nz = smap.shape
    smap = smap.numpy()
    # cmd.reinitialize()
    cmd.load(topology, objname)
    coords_top = cmd.get_coords(objname)
    print(f'topology shape: {coords_top.shape}')
    for i, somframe in enumerate(smap):
        somframe = somframe.reshape((nz // 3, -1))
        print(f'Loading som frame {i} with shape {somframe.shape}')
        cmd.load_coords(list(somframe), f'{objname} and {sel}', state=i + 1)
        if i < n - 1:
            cmd.create(objname, selection=f'{objname} and {sel}', source_state=i + 1, target_state=i + 2)
    if savetraj:
        cmd.save_traj(f'{objname}.dcd', objname)


if __name__ == '__main__':
    import argparse
    # argparse.ArgumentParser(prog=None, usage=None, description=None, epilog=None, parents=[], formatter_class=argparse.HelpFormatter, prefix_chars='-', fromfile_prefix_chars=None, argument_default=None, conflict_handler='error', add_help=True, allow_abbrev=True, exit_on_error=True)
    parser = argparse.ArgumentParser(
        description='Project the som space onto a 2D space using Multi Dimensional Scaling')
    # parser.add_argument(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])
    parser.add_argument('-i', '--in_name', help='name of the som to load', type=str, default='som.p')
    parser.add_argument('--bmus', help='BMUS file', type=str)

    plot_options = parser.add_argument_group("Plotting options")
    plot_options.add_argument('--plot', help='Plot the resulting MDS', action='store_true')
    plot_options.add_argument('--savefig', help='Save the figure to the given filename instead of showing it')
    plot_options.add_argument('--rmsd', help='Scale the axis to RMSD unit', action='store_true')
    plot_options.add_argument(
        '--cmap',
        help='Colormap to use (see: https://matplotlib.org/stable/tutorials/colors/colormaps.html)',
        type=str,
        default='coolwarm')
    plot_options.add_argument('--clim', help='Colorbar limits', nargs='+', type=float)
    plot_options.add_argument('--size', help='Size of the scatter dots', default=2, type=float)
    plot_options.add_argument(
        '--groups',
        help='Color by group based on the given groups file (one value per line with the group id)',
        type=str)
    plot_options.add_argument(
        '--colors',
        help=
        'Colors to use for the group projection. The number of colors must be equal to the number of groups plus one (for the overlap between groups).',
        nargs='+',
        type=str)
    plot_options.add_argument('--subplots', help='Create one subplot for each group', action='store_true')
    plot_options.add_argument('--xylabels', help='Labels for the x and y axes', type=str)
    plot_options.add_argument('--scaling', help='Scaling factor for the mds', type=float, default=1.)

    project_options = parser.add_argument_group("Data projection options")
    project_options.add_argument('--project',
                                 help='read data (1 data point per line) from the given file to project',
                                 type=str)
    project_options.add_argument('--label', help='Label for the data projected', type=str)
    project_options.add_argument('--ref',
                                 help='Compute the RMSD between the reference file given as a PDB and the MDS-SOM map',
                                 type=str,
                                 nargs='+')
    project_options.add_argument('--sel', help='Selection of atom for the reference structure', type=str)
    project_options.add_argument('--cluster', help='Project cluster data', action='store_true')

    pymol_options = parser.add_argument_group("Interactive Pymol session")
    pymol_options.add_argument('--pymol', help='Open PyMol for Interactive visualization', action='store_true')
    pymol_options.add_argument('--top',
                               help='Trajectory topology file in pdb format (for MD trajectory analysis only)',
                               type=str)
    pymol_options.add_argument('--traj', help='Trajectory file', type=str)
    pymol_options.add_argument('--savesomtraj', help='Save the som as a dcd trajectory', action='store_true')

    args = parser.parse_args()

    ax_label = args.xylabels
    scaling = args.scaling
    som = pickle.load(open(args.in_name, 'rb'))
    if not hasattr(som, 'mds'):
        som.mds = None
    if som.mds is None:
        embedding = MDS(n_components=2, dissimilarity='precomputed', n_jobs=-1)
        som.mds = embedding.fit_transform(som.all_to_all_dist)
        som.mds -= som.mds.min(axis=0)
        pickle.dump(som, open(args.in_name, 'wb'))
    if args.bmus is not None:
        bmus = np.int_(np.genfromtxt(args.bmus, usecols=(0, 1)))
    if args.project is not None:
        toproject = np.genfromtxt(args.project)
        projections = project(toproject, bmus, som)
    if args.cluster:
        toproject = np.int_(np.genfromtxt(args.bmus, usecols=(5, )))
        projections = project(toproject, bmus, som)
        args.project = True
        args.cmap = 'tab20c'
    if args.savesomtraj:
        som_to_dcd(args.top, som.centroids, sel=args.sel, savetraj=True)
    if args.top is not None and args.pymol:
        import pymol
        from pymol import cmd
        pymol.finish_launching()
        # improve PyMOL performance for many-state objects and long movies.
        cmd.set('defer_builds_mode', 3)
        cmd.set('auto_zoom', 0)
        if args.traj is not None:
            cmd.load(args.top, 'traj')
            cmd.load_traj(args.traj, 'traj', state=1)
            confviewer = ConfViewer(bmus)
        else:
            som_to_dcd(args.top, som.centroids, sel=args.sel, objname='traj', savetraj=False)
            inds = np.asarray(np.unravel_index(np.arange(som.m * som.n), (som.m, som.n))).T
            confviewer = ConfViewer(inds)

    if args.rmsd:
        n_atoms = som.centroids.shape[1] // 3
        print(f'number of atoms: {n_atoms}')
        scaling = 1. / np.sqrt(n_atoms)
        ax_label = 'RMSD (Å)'
    som.mds *= scaling
    if args.plot:
        if not args.subplots:
            fig = plt.figure()
            plt.xlabel(ax_label)
            plt.ylabel(ax_label)
            cm = plt.cm.get_cmap(args.cmap)
            plt.gca().set_aspect('equal', adjustable='box')
        density = 1 - som.umat.flatten()
        density /= density.sum()
        if args.project is None:
            mapping = density
        else:
            plt.scatter(som.mds[:, 0], som.mds[:, 1], s=args.size * 0.75, c='grey', cmap=cm, alpha=.75)
            mapping = projections
        if args.ref is not None:
            import pymol
            from pymol import cmd
            cmd.feedback('disable', 'all', 'everything')
            if 'traj' not in cmd.get_object_list():
                som_to_dcd(args.top, som.centroids, sel=args.sel, objname='traj')  # This creates the traj PyMol object
            somsize = som.centroids.shape[0]
            for i, ref in enumerate(args.ref):
                cmd.load(ref, f'ref_{i}')
                if args.sel is not None:
                    sel = f'ref_{i} and {args.sel}'
                else:
                    sel = f'ref_{i}'
                cmd.create('traj', sel, 1, somsize + i + 1)
                rmsd_ref = np.asarray(cmd.intra_fit('traj', somsize + i + 1)[:somsize])
                # Compute RMSD from the unique orientation with minimal RMSD
                # coords_ref = coords_aligned[rmsd_ref.argmin()]
                # rmsd_ref = np.sqrt(((som.centroids - coords_ref[None, ...])**2).sum(axis=1) / n_atoms)
                ###############
                min_coords = som.mds[rmsd_ref.argmin()]  # coords in the MDS map with minimal rmsd for ref_i
                rmsd_min = rmsd_ref[rmsd_ref.argmin()]
                delta_rmsd = 0.1
                rmsd_zone = (rmsd_ref <= rmsd_min + delta_rmsd)
                zone_coords = som.mds[rmsd_zone]
                if len(args.ref) > 1:
                    # {rmsd_min:.2f} Å
                    # text = f'{os.path.basename(os.path.splitext(ref)[0])[:4]} {rmsd_min:.2f} Å'
                    print(f'{i}: {os.path.basename(os.path.splitext(ref)[0])} {rmsd_min:.2f} Å')
                    text = f'{i}'
                    delta_x, delta_y = som.mds.max(axis=0) - som.mds.min(axis=0)
                    xytarget = min_coords
                    xynoise = np.asarray([
                        np.random.uniform(low=-delta_x / 5., high=delta_x / 5.),
                        np.random.uniform(low=-delta_y / 5., high=delta_y / 5.)
                    ])
                    xytext = xytarget + xynoise
                    plt.annotate(text, xytarget, xytext, fontsize=8, arrowprops=dict(arrowstyle='->', color='red'))
                    # color = plt.rcParams['axes.prop_cycle'].by_key()['color'][i]
                    # plt.scatter(min_coords[0], min_coords[1], s=50 * args.size, c=color, marker='*', zorder=3, label=f'{os.path.splitext(ref)[0]}: {rmsd_min:.2f} Å')
                    # plt.scatter(zone_coords[:, 0], zone_coords[:, 1], c=color, zorder=3, s=2 * args.size)
            if len(args.ref) == 1:
                mapping = rmsd_ref
                args.label = 'RMSD from reference (Å)'
                args.project = True
            # else:
            #     plt.legend(prop={'size': 10})
        if args.groups is None:
            plt.scatter(som.mds[:, 0], som.mds[:, 1], s=args.size, c=mapping, cmap=cm)
        else:
            groups = np.genfromtxt(args.groups, dtype=str)
            bmus_labels = get_bmu_labels(groups, bmus)
            bmus_labels = get_overlaps(bmus_labels)
            labels = list(bmus_labels.keys())
            if args.colors is None:
                colors = itertools.cycle([
                    None,
                ])
            else:
                colors = itertools.cycle(args.colors)
            bmus_other = set(range(som.m * som.n))
            if args.subplots:
                nlabels = len(labels)
                nrows = min(3, nlabels // 2)
                ncols = int(np.ceil(nlabels / nrows))
                fig, axes = plt.subplots(nrows, ncols, sharex='all', sharey='all')
            plt.scatter(som.mds[:, 0], som.mds[:, 1], s=args.size * 0.75, c='grey', cmap=cm, alpha=.75)
            for i, label in enumerate(labels):
                bmus_label = np.asarray(list(bmus_labels[label]))
                color_ = colors.__next__()
                if len(bmus_label) > 0:
                    if not args.subplots:
                        mds_label = som.mds[bmus_label]
                        density_label = density[bmus_label]
                        plt.scatter(mds_label[:, 0],
                                    mds_label[:, 1],
                                    c=color_,
                                    s=args.size,
                                    label=label,
                                    alpha=density_label / density_label.max())
                    else:  # Subplot
                        mds_label = som.mds[list(bmus_label)]
                        density_label = density[list(bmus_label)]
                        ax = axes.flat[i]
                        # ax.axis('equal')
                        im = ax.scatter(mds_label[:, 0],
                                        mds_label[:, 1],
                                        c=density_label,
                                        cmap=args.cmap,
                                        s=args.size,
                                        vmin=density.min(),
                                        vmax=density.max())
                        ax.set_title(label)
            if args.subplots:
                # require matplotlib v3.4 (see: https://stackoverflow.com/a/65135433/1679629)
                fig.supxlabel(ax_label)
                fig.supylabel(ax_label)
            else:
                leg = plt.legend()
                for lh in leg.legendHandles:
                    lh.set_alpha(1)
        if args.groups is None:
            if args.project is None:
                cbar = plt.colorbar(label='density', format='%.0e')
            else:
                cbar = plt.colorbar(label=args.label)
        if args.subplots:
            fig.colorbar(im, ax=axes.ravel().tolist(), label='density', format='%.0e')
        if args.clim is not None:
            plt.clim(args.clim[0], args.clim[1])
            cbarvals = cbar.get_ticks()
            cbarvals = [f'{e:.2g}' for e in cbarvals]
            cbarvals[0] = f'< {cbarvals[0]}'
            cbarvals[-1] = f'> {cbarvals[-1]}'
            cbar.ax.set_yticklabels(cbarvals)
        # plt.grid()
        fig.canvas.mpl_connect('button_press_event', onclick)
        if args.savefig is None:
            plt.show()
        else:
            plt.savefig(args.savefig)
